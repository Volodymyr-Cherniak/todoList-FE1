{"version":3,"sources":["Components/TodoItem.js","Components/TodoItemList.js","Components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","todo","deleteTodo","moveTodoItemUp","moveTodoItemDown","markTodo","done","className","onClick","id","type","checked","redText","style","styles","name","role","aria-label","textDecoration","TodoItemList","todos","map","el","key","App","InitialState","edit","useState","setTodos","addTodo","setAddTodo","placeholder","value","onChange","e","target","newTodos","Math","random","length","filter","console","log","index","findIndex","item","splice","cutTodos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef2def11.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodoItem = (props) => {\n\n  const {\n    todo,\n    deleteTodo,\n    moveTodoItemUp,\n    moveTodoItemDown,\n    markTodo\n  } = props;\n\n  if (todo.done) {\n    return (\n      <div className='card'>\n        <div className='card-body row ml-1'>\n          <div className='col-6 '>\n            <div className='row'>\n              <div>\n                <button className='btn-xs'\n                        onClick={() => moveTodoItemUp(todo.id)}\n                >^\n                </button>\n\n                <button className='btn-xs'\n                        onClick={() => moveTodoItemDown(todo.id)}\n                >v\n                </button>\n              </div>\n              <input type='checkbox'\n                     className='align-self-center lg'\n                     checked={todo.done}\n              />\n              <span className={`align-self-center mb-0 ${redText}`}\n                    style={styles}\n              >{todo.name}</span>\n            </div>\n          </div>\n          <div className=\"btn-group ml-auto mr-2\"\n               role=\"group\"\n               aria-label=\"Basic example\"\n          >\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-primary\"\n                    onClick={() => markTodo(todo.id)}\n            >Done\n            </button>\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-warning\"\n            >Edit\n            </button>\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => deleteTodo(todo.id)}\n            >Delete\n            </button>\n\n          </div>\n        </div>\n      </div>\n    )\n\n  } else {\n\n    return (\n      <div className='card'>\n        <div className='card-body row ml-1'>\n          <div className='col-6 '>\n            <div className='row'>\n              <div>\n\n                <button className='btn-xs'\n                        onClick={() => moveTodoItemUp(todo.id)}\n                >^</button>\n\n                <button className='btn-xs'\n                        onClick={() => moveTodoItemDown(todo.id)}\n                >v</button>\n              </div>\n\n              <input type='checkbox'\n                     className='align-self-center lg'\n                     checked={todo.done}\n              />\n\n              <span className='align-self-center mb-0'\n              ><strong>{todo.name}</strong></span>\n\n            </div>\n          </div>\n          <div className=\"btn-group ml-auto mr-2\" role=\"group\" aria-label=\"Basic example\">\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-primary\"\n                    onClick={() => markTodo(todo.id)}\n            >Done\n            </button>\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-warning\"\n            >Edit\n            </button>\n\n            <button type=\"button\"\n                    className=\"btn btn-outline-danger\"\n                    onClick={() => deleteTodo(todo.id)}\n            >Delete\n            </button>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n\n};\n\nexport default TodoItem;\n\nlet redText = 'text-danger';\n\nlet styles = {textDecoration: 'line-through'};\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nconst TodoItemList = (props) => {\n\n  const {todos, deleteTodo, moveTodoItemUp, moveTodoItemDown, markTodo} = props;\n\n  return (\n    <div>\n\n      {todos.map(el => <TodoItem todo={el}\n                                 key={el.id}\n                                 deleteTodo={deleteTodo}\n                                 moveTodoItemUp={moveTodoItemUp}\n                                 moveTodoItemDown={moveTodoItemDown}\n                                 markTodo={markTodo}\n      />)}\n\n    </div>\n  )\n\n};\n\nexport default TodoItemList;\n","import React, {useState} from 'react';\nimport TodoItemList from \"./TodoItemList\";\n\n\nfunction App() {\n\n  const InitialState = {\n    todos: [\n      {id: 1, name: 'Todo1', done: false, edit: 'Edit'},\n      {id: 2, name: 'Todo2', done: false, edit: 'Edit'},\n      {id: 3, name: 'Todo3', done: false, edit: 'Edit'}\n    ],\n    addTodo: ['']\n  };\n\n  const [todos, setTodos] = useState(InitialState.todos);\n  const [addTodo, setAddTodo] = useState(InitialState.addTodo);\n\n  const inputFieldHandler = (e) => {\n    setAddTodo(e.target.value);\n    //console.log(addTodo);\n  };\n\n  const AddButtonHandler = () => {\n    const newTodos = [...todos, {id: Math.random(), name: addTodo, done: false, edit: 'Edit'}];\n    if (addTodo.length > 0) setTodos(newTodos);\n    setAddTodo('');\n  };\n\n  const moveTodoItemUp = (id) => {\n    const index = todos.findIndex(el => el.id === id);\n    const item = todos[index];\n    const newTodos = todos.filter(el => el !== item);\n    newTodos.splice(index - 1, 0, item);\n    setTodos(newTodos);\n\n    console.log('up', newTodos);\n  };\n\n  const moveTodoItemDown = (id) => {\n    const index = todos.findIndex(el => el.id === id);\n    const item = todos[index];\n    const cutTodos = todos.filter(el => el !== item);\n    cutTodos.splice(index + 1, 0, item);\n    setTodos(cutTodos);\n\n    console.log('up', cutTodos);\n  };\n\n  const deleteTodo = (id) => {\n    const newTodos = todos.filter(todo => todo.id !== id);\n    setTodos(newTodos);\n    console.log('DELETE', id)\n  };\n\n  const markTodo = (id) => {\n    const newTodos = todos.map(el => {\n      if (el.id === id) return {...el, done: !el.done};\n      return el;\n    });\n    setTodos(newTodos);\n  };\n\n\n  return (\n    <div className=\"container\">\n      <h4>My Todos</h4>\n      <div>\n        <input type=\"text\"\n               placeholder='Type here todo'\n               value={addTodo}\n               onChange={inputFieldHandler}\n        />\n        <button onClick={AddButtonHandler}>Add</button>\n\n        <TodoItemList todos={todos}\n                      deleteTodo={deleteTodo}\n                      moveTodoItemUp={moveTodoItemUp}\n                      moveTodoItemDown={moveTodoItemDown}\n                      markTodo={markTodo}\n        />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}